#base layer
class Layer: #class layer takes in input and output as multi-dimensional arrays
    def __init__(self): #defines initial input and output
        self.input=None
        self.output=None
    def forward(self,input): # takes in input and gives output
        pass
    def backward(self,output_gradient,learning_rate): # takes in derivative of error (E)
        pass
        
#Dense layer
import numpy as np
class Dense(Layer):
    def __init__(self,input_size,output_size): # takes in number of neurons in the input and output
        self.weights=np.random.randn(output_size,input_size) # initliaze weights # since need to dot product with x (size i) need weights to be  j x i
        self.bias=np.random.randn(output_size,1) #intilize bias
    def forward(self,input):
        self.input= input
        return np.dot(self.weights, self.input) + self.bias # computes the dotproduct of weights and input 
    def backward(self,output_gradient,learning_rate):
        weights_gradient=np.dot(output_gradient,self.input.T) #dE/dw
        self.weights -= learning_rate * weights_gradient #dE/dw
        self.bias -= learning_rate * output_gradient #dE/dB
        return np.dot(self.weights.T,output_gradient) #dE/dX
    

class Activation(Layer):
    def __init__(self, activation, activation_prime):
        self.activation = activation
        self.activation_prime = activation_prime
    def forward(self, input):
        self.input = input
        return self.activation(self.input)
    def backward(self, output_gradient, learning_rate):
        return np.multiply(output_gradient, self.activation_prime(self.input)) # added return

import numpy as np
class Tanh(Activation):
    def __init__(self):
        tanh=lambda x: np.tanh(x)
        tanh_prime=lambda x: 1 - np.tanh(x) ** 2
        super().__init__(tanh,tanh_prime)


import numpy as np
def mse(y_true,y_pred):
    return np.mean(np.power(y_true-y_pred,2))
def mse_prime(y_true,y_pred):
    return 2 * (y_pred - y_true) / np.size(y_true) # added colon

def predict(network, input):
    output = input
    for layer in network:
        output = layer.forward(output)
    return output

def train(network, loss, loss_prime, x_train, y_train, epochs = 1000, learning_rate = 0.01, verbose = True):
    for e in range(epochs):
        error = 0
        for x, y in zip(x_train, y_train):
            # forward
            output = predict(network, x)

            # error
            error += loss(y, output)

            # backward
            grad = loss_prime(y, output)
            for layer in reversed(network):
                grad = layer.backward(grad, learning_rate)

        error /= len(x_train)
        if verbose:
            print(f"{e + 1}/{epochs}, error={error}")

# we want to see if the neral network can emmulate the XOR function that transistors compute (or computation)
    
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

X = np.reshape([[0, 0], [0, 1], [1, 0], [1, 1]], (4, 2, 1))
Y = np.reshape([[0], [1], [1], [0]], (4, 1, 1))

network = [
Dense(2, 3),
Tanh(),
Dense(3, 1),
Tanh()
]

# train
train(network, mse, mse_prime, X, Y, epochs=10000, learning_rate=0.1)

# decision boundary plot
points = []
for x in np.linspace(0, 1, 20):
    for y in np.linspace(0, 1, 20):
        z = predict(network, [[x], [y]])
        points.append([x, y, z[0,0]])

points = np.array(points)

fig = plt.figure()
ax = fig.add_subplot(111, projection="3d")
ax.scatter(points[:, 0], points[:, 1], points[:, 2], c=points[:, 2], cmap="winter")
plt.show()
