Forward propagation
classifying if a digit is 0 or 1
to come up with a binary classification model use a >= 0.5 at the output
forward propagation works by moving from left to right layers

Tensorflow was developed by Google and Keras i s a framework in Tensorflow 

An example is displayed with complex datapoints, a logistic plot where true is dotted around the exterior and false is on 
the interior.

How would get machine leanring to learn this? 

x = np.array([200.0 17.0])
layer_1= Dense(units=3, activation = 'sigmoid') # 3 units in this layer #sigmoid function (logisitc one we usually use)
a1= layer_1(x) # gets the output vector from layer 1
layer_2=Dense(units=1,activation='sigmoid')
a2=layer_2(a1)

if a2 >= 0.5:
  y_hat=1
else:
  y_hat=0

Matrices
to create an array

x=np.array([1,3,4],[4,5,2])    # 2 x 3 matrix

tensor flow created its own data type, Tensor = matrix
changing between Numpy and Tensor may present error due to data type mismatch

Creating Neural Network
layer_1=Dense(units=3, activiation = 'sigmoid')
layer_2=Dense(units=1, activation = 'sigmoid')
model = sequential([layer_1,layer_2]) # sequential creates the neural network for you
x=np.array([200.0, 17.0], ...etc
y=np.array([1,0,0,1])

model.compile()
model.fit(x,y) # trains the data on x and y

model.predict(x_new)

Digit classification odel 
layer_1=Dense(units=25, activation = "sigmoid")
layer_2=Dense(units=25, activation = "sigmoid")
layer_3=Dense(units=25, activation = "sigmoid")

model = sequential([layer_1,layer_2,layer_3]) # sequential creates the neural network for you
x=np.array([200.0, 17.0], ...etc
y=np.array([1,0])

model.compile()
model.fit(x,y) # trains the data on x and y

model.predict(x_new)

=========
model.summary() tells you all the data about your network








